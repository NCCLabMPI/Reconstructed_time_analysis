file = file.path(parent_dir, 'Reconstructed_time_experiment', 'data', sub_folder, ses_folder, file_name)
# load file
event_table = read.csv(file)
table_size[count] = dim(event_table %>% filter(task_relevance != 'target'))[1]
# make format consistent
if ('X' %in% colnames(event_table))
{event_table$X <- NULL}
colnames(event_table)[which(names(event_table) == "has_repsonse_vis")] <- "has_response_vis"
colnames(event_table)[which(names(event_table) == "trial_repsonse_vis")] <- "trial_response_vis"
# add subject number and session column
event_table = event_table %>% mutate(sub_num = subNum)
event_table = event_table %>% mutate(ses = ses)
# z-score of iRT_vis and iRT_aud
event_table = event_table %>% mutate(z_iRT_vis = (iRT_vis-mean(iRT_vis))/sd(iRT_vis))
event_table = event_table %>% mutate(z_iRT_aud = (iRT_aud-mean(iRT_aud))/sd(iRT_aud))
# z-score of RT_vis and RTaud
event_table = event_table %>% mutate(z_RT_vis = (RT_vis-mean(RT_vis, na.rm = TRUE))/sd(RT_vis, na.rm = TRUE))
event_table = event_table %>% mutate(z_RT_aud = (RT_aud-mean(RT_aud, na.rm = TRUE))/sd(RT_aud, na.rm = TRUE))
# concatanate the tables
if ( exists('all_event_table')){
all_event_table = rbind(all_event_table, event_table)
} else {
all_event_table = event_table
}
}}
table_size
# clear workspace
rm(list = ls())
wd = 'C:/Users/micha.engeser/Documents/GitHub/Reconstructed_time_analysis'
setwd(wd)
dir()
# get package manager package
if (!('pacman' %in% installed.packages()))
{install.packages("pacman")}
library(pacman)
# install all needed packages
pacman::p_load('dplyr', 'ggdist', 'ggeffects', 'ggpubr', 'lme4', 'emmeans', 'rstatix', 'car', 'rsq', 'sjPlot', 'brms')
# details of subjects
subNums = c(105, 106, 109, 110, 113, 114, 115, 116, 118, 122) # 116 and 122 are the same person
sessions = c(1,2,3)
Lab_ID = 'SX'
count = 0
sub_ids = NaN
# loading the files
for (subNum in subNums ){
for (ses in sessions ){
count = count + 1
sub_ids[count] = paste0(Lab_ID, subNum)
task = ifelse(ses == 1,'prp','introspection')
sub_folder = paste0('sub-', Lab_ID, subNum)
ses_folder = paste0('ses-', ses)
file_name = paste0(sub_folder, '_', ses_folder, '_run-all_task-', task,'_events.csv')
setwd("..")
parent_dir = getwd()
setwd(wd)
file = file.path(parent_dir, 'Reconstructed_time_experiment', 'data', sub_folder, ses_folder, file_name)
# if file for subject and session exists load it
if (file.exists(file)){
event_table = read.csv(file)
# make format consistent
if ('X' %in% colnames(event_table))
{event_table$X <- NULL}
if ('iRT_aud' %in% colnames(event_table))
{event_table$iRT_aud <- NULL}
if ('iRT_vis' %in% colnames(event_table))
{event_table$iRT_vis <- NULL}
if ('intro_jit' %in% colnames(event_table))
{event_table$intro_jit <- NULL}
colnames(event_table)[which(names(event_table) == "has_repsonse_vis")] <- "has_response_vis"
colnames(event_table)[which(names(event_table) == "trial_repsonse_vis")] <- "trial_response_vis"
# add subject number and session column
event_table = event_table %>% mutate(sub_num = subNum)
event_table = event_table %>% mutate(ses = ses)
# z-score of RT_vis and RTaud
event_table = event_table %>% mutate(z_RT_vis = (RT_vis-mean(RT_vis, na.rm = TRUE))/sd(RT_vis, na.rm = TRUE))
event_table = event_table %>% mutate(z_RT_aud = (RT_aud-mean(RT_aud, na.rm = TRUE))/sd(RT_aud, na.rm = TRUE))
# concatanate the tables
if ( exists('all_event_table')){
all_event_table = rbind(all_event_table, event_table)
} else {
all_event_table = event_table
}
}}}
# 116 and 122 are the same person - should have the same id
all_event_table = all_event_table %>% mutate(sub_num = ifelse(sub_num == 122, 116, sub_num))
all_event_table = all_event_table %>% mutate(sub_id = ifelse(sub_id == 'SX122','SX116', sub_id))
# without exclusion
raw_event_table = all_event_table
# # remove false alarm
all_event_table = all_event_table[all_event_table$trial_response_vis != 'fa', ]
# # remove RT < 100 ms
all_event_table = all_event_table[all_event_table$RT_aud > 0.1, ]
# add response window column
all_event_table = all_event_table %>% mutate(resp_window = (2-onset_SOA)+stim_jit )
# remove RT > mean response window for offset, long duration adn long SOA
max_RT = mean(all_event_table$resp_window[all_event_table$SOA == 0.466 & all_event_table$SOA_lock == 'offset' & all_event_table$duration == 1.5], na.rm = TRUE)
all_event_table = all_event_table[all_event_table$RT_aud < max_RT, ]
# remove incorrect auditory responses
all_event_table = all_event_table[all_event_table$trial_accuracy_aud == 1, ]
# remove NaNs from auditory responses
all_event_table = all_event_table[!is.na(all_event_table$RT_aud), ]
# with targets
target_event_table = all_event_table
# remove target trials
all_event_table = all_event_table[all_event_table$task_relevance != 'target', ]
# # check if any combination of condition (cell) has less than 30 trials
#
# task_relevance_lvl = c('non-target', 'irrelevant')
# SOA_lock_lvl = c('onset', 'offset')
# SOA_lvl = c(0,0.232,0.466)
# duration_lvl = c(0.5,1,1.5)
# sub_id_lvl = sub_ids
#
#
# for (o in sub_id_lvl){
#   for (i in SOA_lvl){
#     for (ii in SOA_lock_lvl) {
#       for (iii in task_relevance_lvl) {
#         for (iv in duration_lvl) {
#
#           cell_trials = sum(all_event_table$sub_id == o & all_event_table$SOA == i & all_event_table$SOA_lock == ii & all_event_table$task_relevance == iii & all_event_table$duration == iv, na.rm = TRUE)
#
#
#           if(cell_trials < 30){
#             cell_name = paste(i,ii,iii,iv,sep= '-')
#             warning(paste0('Subject ',o,' has only ', cell_trials,' trials for cell: ', cell_name, '\n'))
#           }
#         }}}}}
# add log transformed column
all_event_table = all_event_table %>% mutate(log_RT_aud = log(RT_aud))
# make task relevance and SOA lock numeric
all_event_table = all_event_table %>% mutate(is_task_relevant = ifelse(task_relevance == 'non-target',1,0))
all_event_table = all_event_table %>% mutate(is_onset = ifelse(SOA_lock == 'onset',1,0))
# make SOA and duration factors
all_event_table = all_event_table %>% mutate(f_SOA = factor(SOA, ordered = TRUE, levels = c("0", "0.232", "0.466")))
all_event_table = all_event_table %>% mutate(f_duration = factor(duration, ordered = TRUE, levels = c("0.5", "1", "1.5")))
# center variables
all_event_table = all_event_table %>% mutate(c_task_relevant = is_task_relevant - mean(is_task_relevant))
all_event_table = all_event_table %>% mutate(c_is_onset = is_onset - mean(is_onset))
all_event_table = all_event_table %>% mutate(c_SOA = SOA - mean(SOA))
all_event_table = all_event_table %>% mutate(c_duration = duration - mean(duration))
all_event_table = all_event_table %>% mutate(c_pitch = (pitch-1050)/100) # makes pitches 0.5 for high and -0.5 for low
# make duration a string
event_table2 = all_event_table
event_table2$duration = as.character(event_table2$duration)
n = length(subNums)
# RT and SOA by duration, extended time - by task relevance
plot_data1 = target_event_table %>% group_by(onset_SOA,SOA_lock, duration, sub_id, task_relevance) %>%
summarise(RT_mean = mean(RT_aud, na.rm = TRUE))
plot_data1 = plot_data1 %>%  group_by(onset_SOA, SOA_lock,duration, task_relevance) %>%
summarise(mean_RT = mean(RT_mean, na.rm = TRUE),
sd_RT = sd(RT_mean, na.rm = TRUE),
sem_RT = sd_RT / sqrt(n))
vis_data1 = target_event_table %>% group_by(onset_SOA,SOA_lock, sub_id, task_relevance, duration) %>%
summarise(RT_mean_vis = mean(RT_vis, na.rm = TRUE))
# modify duration to show only one duration at the onset
vis_data1= vis_data1 %>% mutate(duration = ifelse(SOA_lock == 'onset',0,duration))
vis_data1 = vis_data1 %>%  group_by(onset_SOA, SOA_lock, task_relevance, duration) %>%
summarise(mean_RT_vis = mean(RT_mean_vis, na.rm = TRUE),
sd_RT_vis = sd(RT_mean_vis, na.rm = TRUE),
sem_RT_vis = sd_RT_vis / sqrt(n))
# remove NaNs from auditory responses
plot_data1 = plot_data1[!is.na(plot_data1$mean_RT), ]
vis_data1 = vis_data1[!is.na(vis_data1$mean_RT_vis), ]
# define order
plot_data1$task_relevance = factor(plot_data1$task_relevance,
levels = c('target', 'non-target', 'irrelevant'),
labels = c('Target', 'Relevant non-target', 'Irrelevant non-target'))
vis_data1$task_relevance = factor(vis_data1$task_relevance,
levels = c('target'),
labels = c('Target'))
# modify duration to show only one duration at the onset
vis_data1= vis_data1 %>% mutate(duration = ifelse(SOA_lock == 'onset',0,duration))
p24 = ggplot(data = plot_data1, aes(x = onset_SOA * 1000, y = mean_RT * 1000, group = interaction(as.character(duration), SOA_lock), color = as.character(duration), linetype = SOA_lock)) +
geom_line(data = vis_data1, aes(x = onset_SOA * 1000, y = mean_RT_vis * 1000, color = 'darkgrey', group = interaction(as.character(duration), SOA_lock))) +
geom_errorbar(data = vis_data1, aes(x = onset_SOA * 1000, y = mean_RT_vis * 1000, ymin = (mean_RT_vis - sem_RT_vis) * 1000, ymax = (mean_RT_vis + sem_RT_vis) * 1000, group = interaction(as.character(duration), SOA_lock), color = 'darkgrey', width = 20)) +
geom_point(data = vis_data1, aes(x = onset_SOA * 1000, y = mean_RT_vis * 1000, color = 'darkgrey', group = interaction(as.character(duration), SOA_lock)), size = 1) +
geom_line() +
geom_errorbar(aes(ymin = (mean_RT - sem_RT) * 1000, ymax = (mean_RT + sem_RT) * 1000), width = 20) +
geom_point(size = 1) +
facet_grid(. ~ task_relevance) +
labs(title = "Objective reaction time by task-relevance", tag = "A") +
ylab("Reaction time [ms]") +
xlab('SOA to visual onset [ms]') +
scale_color_manual(values = c('darkviolet', 'darkorange', 'darkred', 'darkgrey'),
name = 'Measure',
labels = c(expression("RT"[aud]~" [500 ms duration]  "),
expression("RT"[aud]~" [1000 ms duration]"),
expression("RT"[aud]~" [1500 ms duration]"),
expression("RT"[vis]~" [all durations]          "))) +
scale_linetype_manual(values = c("solid", "dashed"),
name = 'SOA time-locked to',
breaks = c('onset', 'offset')) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = "solid"),
panel.background = element_blank(),
axis.text = element_text(color = "black", size = 10),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15, face="bold"),
axis.title = element_text(size = 15, face="bold"),
plot.title = element_text(size = 15, face="bold"),
strip.text = element_text(size = 15))
p24
# RT and SOA, extended time - by task relevance (collapse duration)
plot_data2 = target_event_table %>% group_by(onset_SOA,SOA_lock, duration, sub_id, task_relevance, task) %>%
summarise(RT_mean = mean(RT_aud, na.rm = TRUE))
# modify duration to show only one duration at the onset
plot_data2 = plot_data2 %>% mutate(duration = ifelse(SOA_lock == 'onset',0,duration))
plot_data2 = plot_data2 %>%  group_by(onset_SOA, SOA_lock,duration, task_relevance, task) %>%
summarise(mean_RT = mean(RT_mean, na.rm = TRUE),
sd_RT = sd(RT_mean, na.rm = TRUE),
sem_RT = sd_RT / sqrt(n))
# remove NaNs from auditory responses
plot_data2 = plot_data2[!is.na(plot_data2$mean_RT), ]
# define order
plot_data2$task_relevance = factor(plot_data2$task_relevance,
levels = c('target', 'non-target', 'irrelevant'),
labels = c('Target', 'Relevant non-target', 'Irrelevant non-target'))
# vis_data2 = target_event_table %>% group_by(onset_SOA,SOA_lock, sub_id, task_relevance, duration, task) %>%
#                                       summarise(RT_mean_vis = mean(RT_vis, na.rm = TRUE))
#
# # modify duration to show only one duration at the onset
# vis_data2= vis_data2 %>% mutate(duration = ifelse(SOA_lock == 'onset',0,duration))
#
# vis_data2 = vis_data2 %>%  group_by(onset_SOA, SOA_lock, task_relevance, duration, task) %>%
#                                       summarise(mean_RT_vis = mean(RT_mean_vis, na.rm = TRUE),
#                                                          sd_RT_vis = sd(RT_mean_vis, na.rm = TRUE),
#                                                          sem_RT_vis = sd_RT_vis / sqrt(n))
#
#
# # remove NaNs from auditory responses
# vis_data2 = vis_data2[!is.na(vis_data2$mean_RT_vis), ]
#
# # define order
# vis_data2$task_relevance = factor(vis_data2$task_relevance,
#                                    levels = c('target'),
#                                    labels = c('Target'))
#
# # modify duration to show only one duration at the onset
# vis_data2= vis_data2 %>% mutate(duration = ifelse(SOA_lock == 'onset',0,duration))
p25 = ggplot(data = plot_data2 %>% filter(task == 'prp'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'prp' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock)) +
geom_line() +
geom_errorbar(aes(ymin = (mean_RT - sem_RT) * 1000, ymax = (mean_RT + sem_RT) * 1000), width = 20) +
geom_point(size = 1) +
geom_line(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock)) +
geom_errorbar(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock, ymin = (mean_RT - sem_RT) * 1000, ymax = (mean_RT + sem_RT) * 1000), width = 20) +
geom_point(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock),size = 1) +
facet_grid(. ~ task_relevance) +
labs(title = "Objective reaction time by task-relevance", tag = "A") +
ylab("Reaction time [ms]") +
xlab('SOA to visual onset [ms]') +
scale_color_manual(values = c('blue','red'),
name = 'Experiment',
breaks = c('prp','intro'),
labels = c('Experiment 1','Experiment 2')) +
scale_linetype_manual(values = c("solid", "dashed"),
name = 'SOA time-locked to',
breaks = c('onset', 'offset')) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = "solid"),
panel.background = element_blank(),
axis.text = element_text(color = "black", size = 10),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15, face="bold"),
axis.title = element_text(size = 15, face="bold"),
plot.title = element_text(size = 15, face="bold"),
strip.text = element_text(size = 15))
p25
box_plot_data = all_event_table %>%  group_by(sub_id, SOA, SOA_lock, task_relevance, duration) %>% summarise(mean_RT = mean(RT_aud, na.rm = TRUE), sd_RT = sd(RT_aud, na.rm = TRUE))
colors = c(rep("red",3),rep("darkred",3),rep("green",3),rep("darkgreen",3),rep("blue",3),rep("darkblue",3),rep("yellow",3), rep("orange",3))
ggplot(box_plot_data, aes(SOA_lock, mean_RT, fill=interaction(duration, task_relevance, SOA))) +
stat_boxplot(geom ='errorbar')+
geom_boxplot() +
scale_fill_manual(values=colors)
## general linear mixed effect model from experiment 1
# fixed effects: SOA (ordinal), SOA-Lock (as c_is_onset,  numeric, centered), Task-relevance (as is relevant, numeric, centered)
# random effects: Subject ID, Duration (ordinal)
model_exp1 = glmer(RT_aud ~ f_SOA*c_is_onset*c_task_relevant +
(1*f_SOA*c_is_onset*c_task_relevant | sub_id)+
(1*f_SOA*c_is_onset*c_task_relevant | f_duration),
family=Gamma(link="identity"), data=all_event_table)
summary(model_exp1)
Anova(model_exp1)
plot(fitted(model_exp1),residuals(model_exp1))
qqnorm(residuals(model_exp1))
rsq.glmm(model_exp1)
# RT and SOA, extended time - by task relevance (collapse duration)
plot_data2 = target_event_table %>% group_by(onset_SOA,SOA_lock, duration, sub_id, task_relevance, task) %>%
summarise(RT_mean = mean(RT_aud, na.rm = TRUE))
# modify duration to show only one duration at the onset
plot_data2 = plot_data2 %>% mutate(duration = ifelse(SOA_lock == 'onset',0,duration))
# plot_data2 = plot_data2 %>%  group_by(onset_SOA, SOA_lock,duration, task_relevance, task) %>%
summarise(mean_RT = mean(RT_mean, na.rm = TRUE),
sd_RT = sd(RT_mean, na.rm = TRUE),
sem_RT = sd_RT / sqrt(n))
# RT and SOA, extended time - by task relevance (collapse duration)
plot_data2 = target_event_table %>% group_by(onset_SOA,SOA_lock, duration, sub_id, task_relevance, task) %>%
summarise(RT_mean = mean(RT_aud, na.rm = TRUE))
# modify duration to show only one duration at the onset
plot_data2 = plot_data2 %>% mutate(duration = ifelse(SOA_lock == 'onset',0,duration))
#
# plot_data2 = plot_data2 %>%  group_by(onset_SOA, SOA_lock,duration, task_relevance, task) %>%
#                                       summarise(mean_RT = mean(RT_mean, na.rm = TRUE),
#                                                          sd_RT = sd(RT_mean, na.rm = TRUE),
#                                                          sem_RT = sd_RT / sqrt(n))
# remove NaNs from auditory responses
plot_data2 = plot_data2[!is.na(plot_data2$mean_RT), ]
# RT and SOA, extended time - by task relevance (collapse duration)
plot_data2 = target_event_table %>% group_by(onset_SOA,SOA_lock, duration, sub_id, task_relevance, task) %>%
summarise(mean_RT = mean(RT_aud, na.rm = TRUE))
# modify duration to show only one duration at the onset
plot_data2 = plot_data2 %>% mutate(duration = ifelse(SOA_lock == 'onset',0,duration))
#
# plot_data2 = plot_data2 %>%  group_by(onset_SOA, SOA_lock,duration, task_relevance, task) %>%
#                                       summarise(mean_RT = mean(RT_mean, na.rm = TRUE),
#                                                          sd_RT = sd(RT_mean, na.rm = TRUE),
#                                                          sem_RT = sd_RT / sqrt(n))
# remove NaNs from auditory responses
plot_data2 = plot_data2[!is.na(plot_data2$mean_RT), ]
# define order
plot_data2$task_relevance = factor(plot_data2$task_relevance,
levels = c('target', 'non-target', 'irrelevant'),
labels = c('Target', 'Relevant non-target', 'Irrelevant non-target'))
p25 = ggplot(data = plot_data2 %>% filter(task == 'prp'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'prp' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock)) +
geom_line() +
geom_errorbar(aes(ymin = (mean_RT - sem_RT) * 1000, ymax = (mean_RT + sem_RT) * 1000), width = 20) +
geom_point(size = 1) +
geom_line(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock)) +
geom_errorbar(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock, ymin = (mean_RT - sem_RT) * 1000, ymax = (mean_RT + sem_RT) * 1000), width = 20) +
geom_point(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock),size = 1) +
facet_grid(task_relevance ~ sub_id) +
labs(title = "Objective reaction time by task-relevance", tag = "A") +
ylab("Reaction time [ms]") +
xlab('SOA to visual onset [ms]') +
scale_color_manual(values = c('blue','red'),
name = 'Experiment',
breaks = c('prp','intro'),
labels = c('Experiment 1','Experiment 2')) +
scale_linetype_manual(values = c("solid", "dashed"),
name = 'SOA time-locked to',
breaks = c('onset', 'offset')) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = "solid"),
panel.background = element_blank(),
axis.text = element_text(color = "black", size = 10),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15, face="bold"),
axis.title = element_text(size = 15, face="bold"),
plot.title = element_text(size = 15, face="bold"),
strip.text = element_text(size = 15))
p25
# RT and SOA, extended time - by task relevance (collapse duration)
plot_data2 = target_event_table
# modify duration to show only one duration at the onset
plot_data2 = plot_data2 %>% mutate(duration = ifelse(SOA_lock == 'onset',0,duration))
plot_data2 = plot_data2 %>%  group_by(onset_SOA, SOA_lock, duration, sub_id, task_relevance) %>%
summarise(mean_RT = mean(RT_aud, na.rm = TRUE),
sd_RT = sd(RT_aud, na.rm = TRUE),
sem_RT = sd_RT / sqrt(n))
# remove NaNs from auditory responses
plot_data2 = plot_data2[!is.na(plot_data2$mean_RT), ]
# define order
plot_data2$task_relevance = factor(plot_data2$task_relevance,
levels = c('target', 'non-target', 'irrelevant'),
labels = c('Target', 'Relevant non-target', 'Irrelevant non-target'))
p25 = ggplot(data = plot_data2 %>% filter(task == 'prp'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'prp' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock)) +
geom_line() +
geom_errorbar(aes(ymin = (mean_RT - sem_RT) * 1000, ymax = (mean_RT + sem_RT) * 1000), width = 20) +
geom_point(size = 1) +
geom_line(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock)) +
geom_errorbar(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock, ymin = (mean_RT - sem_RT) * 1000, ymax = (mean_RT + sem_RT) * 1000), width = 20) +
geom_point(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock),size = 1) +
facet_grid(task_relevance ~ sub_id) +
labs(title = "Objective reaction time by task-relevance", tag = "A") +
ylab("Reaction time [ms]") +
xlab('SOA to visual onset [ms]') +
scale_color_manual(values = c('blue','red'),
name = 'Experiment',
breaks = c('prp','intro'),
labels = c('Experiment 1','Experiment 2')) +
scale_linetype_manual(values = c("solid", "dashed"),
name = 'SOA time-locked to',
breaks = c('onset', 'offset')) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = "solid"),
panel.background = element_blank(),
axis.text = element_text(color = "black", size = 10),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15, face="bold"),
axis.title = element_text(size = 15, face="bold"),
plot.title = element_text(size = 15, face="bold"),
strip.text = element_text(size = 15))
p25
View(plot_data2)
# RT and SOA, extended time - by task relevance (collapse duration)
plot_data2 = target_event_table
# modify duration to show only one duration at the onset
plot_data2 = plot_data2 %>% mutate(duration = ifelse(SOA_lock == 'onset',0,duration))
plot_data2 = plot_data2 %>%  group_by(onset_SOA, SOA_lock, duration, sub_id, task_relevance, task) %>%
summarise(mean_RT = mean(RT_aud, na.rm = TRUE),
sd_RT = sd(RT_aud, na.rm = TRUE),
sem_RT = sd_RT / sqrt(n))
# remove NaNs from auditory responses
plot_data2 = plot_data2[!is.na(plot_data2$mean_RT), ]
# define order
plot_data2$task_relevance = factor(plot_data2$task_relevance,
levels = c('target', 'non-target', 'irrelevant'),
labels = c('Target', 'Relevant non-target', 'Irrelevant non-target'))
p25 = ggplot(data = plot_data2 %>% filter(task == 'prp'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'prp' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock)) +
geom_line() +
geom_errorbar(aes(ymin = (mean_RT - sem_RT) * 1000, ymax = (mean_RT + sem_RT) * 1000), width = 20) +
geom_point(size = 1) +
geom_line(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock)) +
geom_errorbar(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock, ymin = (mean_RT - sem_RT) * 1000, ymax = (mean_RT + sem_RT) * 1000), width = 20) +
geom_point(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock),size = 1) +
facet_grid(task_relevance ~ sub_id) +
labs(title = "Objective reaction time by task-relevance", tag = "A") +
ylab("Reaction time [ms]") +
xlab('SOA to visual onset [ms]') +
scale_color_manual(values = c('blue','red'),
name = 'Experiment',
breaks = c('prp','intro'),
labels = c('Experiment 1','Experiment 2')) +
scale_linetype_manual(values = c("solid", "dashed"),
name = 'SOA time-locked to',
breaks = c('onset', 'offset')) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = "solid"),
panel.background = element_blank(),
axis.text = element_text(color = "black", size = 10),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15, face="bold"),
axis.title = element_text(size = 15, face="bold"),
plot.title = element_text(size = 15, face="bold"),
strip.text = element_text(size = 15))
p25
p25
# RT and SOA, extended time - by task relevance (collapse duration)
plot_data2 = all_event_table
# modify duration to show only one duration at the onset
plot_data2 = plot_data2 %>% mutate(duration = ifelse(SOA_lock == 'onset',0,duration))
plot_data2 = plot_data2 %>%  group_by(onset_SOA, SOA_lock, duration, sub_id, task) %>%
summarise(mean_RT = mean(RT_aud, na.rm = TRUE),
sd_RT = sd(RT_aud, na.rm = TRUE),
sem_RT = sd_RT / sqrt(n))
# remove NaNs from auditory responses
plot_data2 = plot_data2[!is.na(plot_data2$mean_RT), ]
# define order
plot_data2$task_relevance = factor(plot_data2$task_relevance,
levels = c('target', 'non-target', 'irrelevant'),
labels = c('Target', 'Relevant non-target', 'Irrelevant non-target'))
# RT and SOA, extended time - by task relevance (collapse duration)
plot_data2 = all_event_table
# modify duration to show only one duration at the onset
plot_data2 = plot_data2 %>% mutate(duration = ifelse(SOA_lock == 'onset',0,duration))
plot_data2 = plot_data2 %>%  group_by(onset_SOA, SOA_lock, duration, sub_id, task) %>%
summarise(mean_RT = mean(RT_aud, na.rm = TRUE),
sd_RT = sd(RT_aud, na.rm = TRUE),
sem_RT = sd_RT / sqrt(n))
# remove NaNs from auditory responses
plot_data2 = plot_data2[!is.na(plot_data2$mean_RT), ]
# # define order
# plot_data2$task_relevance = factor(plot_data2$task_relevance,
#                                    levels = c('target', 'non-target', 'irrelevant'),
#                                    labels = c('Target', 'Relevant non-target', 'Irrelevant non-target'))
p25 = ggplot(data = plot_data2 %>% filter(task == 'prp'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'prp' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock)) +
geom_line() +
geom_errorbar(aes(ymin = (mean_RT - sem_RT) * 1000, ymax = (mean_RT + sem_RT) * 1000), width = 20) +
geom_point(size = 1) +
geom_line(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock)) +
geom_errorbar(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock, ymin = (mean_RT - sem_RT) * 1000, ymax = (mean_RT + sem_RT) * 1000), width = 20) +
geom_point(data = plot_data2 %>% filter(task == 'introspection'), aes(x = onset_SOA * 1000, y = mean_RT * 1000, color = 'intro' , group = interaction(as.character(duration), SOA_lock), linetype = SOA_lock),size = 1) +
facet_wrap(~ sub_id, nrow = 3, ncol = 3, scales = "free")+
labs(title = "Objective reaction time by task-relevance", tag = "A") +
ylab("Reaction time [ms]") +
xlab('SOA to visual onset [ms]') +
scale_color_manual(values = c('blue','red'),
name = 'Experiment',
breaks = c('prp','intro'),
labels = c('Experiment 1','Experiment 2')) +
scale_linetype_manual(values = c("solid", "dashed"),
name = 'SOA time-locked to',
breaks = c('onset', 'offset')) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = "solid"),
panel.background = element_blank(),
axis.text = element_text(color = "black", size = 10),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15, face="bold"),
axis.title = element_text(size = 15, face="bold"),
plot.title = element_text(size = 15, face="bold"),
strip.text = element_text(size = 15))
p25
p25
